[config]
# If set to enabled, it will check for updates when you run the matugen command, notifying you that an update is avaiable.
# WARNING: Matugen needs to be compiled with the `update-informer` feature for this to work.
version_check = false

[config.wallpaper]
# The base command to run for applying the wallpaper, shouldn't have spaces in it.
command = "swww"

# The arguments that will be provided to the command.
# Keywords like {{ mode }} or anything that works inside of hooks doesn't work here.
# The last argument will be the image path.
arguments = ["img", "--transition-type", "center"]

# For example, killing the wallpaper daemon. Usage is like a normal hook.
# pre_hook = ""

[config.custom_keywords]
test = "aaaa"

[templates.kitty]
# Relative paths will be resolved from the path `config.toml` is in.
input_path = "./templates/kitty-colors.conf"
output_path = "../kitty/matukit.conf"
post_hook = "kitty @ set-colors -a -c ~/.config/kitty/matukit.conf"

[templates.starship]
input_path = './templates/starship-colors.toml'
output_path = '../starship.toml'

[templates.yazi]
input_path = './templates/yazi-theme.toml'
output_path = '../yazi/theme.toml'

[templates.waybar]
input_path = './templates/colors.css'
output_path = '../waybar/colors.css'
post_hook = 'pkill -SIGUSR2 waybar'

[templates.hyprland]
input_path = './templates/hyprland-colors.conf'
output_path = '../hypr/colors.conf'
post_hook = 'hyprctl reload'

[templates.gtk3]
input_path = './templates/gtk-colors.css'
output_path = '~/.config/gtk-3.0/colors.css'

[templates.gtk4]
input_path = './templates/gtk-colors.css'
output_path = '~/.config/gtk-4.0/colors.css'

[templates.kvan]
input_path = './templates/fus.qss'
output_path = '~/.config/qt6ct/qss/andi.qss'

[templates.qt6ct]
input_path = './templates/qtct-colors.conf'
output_path = '~/.config/qt6ct/colors/matugen.conf'

# This will use a different input path depending on what mode you use.
# input_path_modes = { dark = "./colors.whatever-extension", light = "./colors.whatever-extension" }

# This will compare all of the colors inside the array with the color you set as `compare_to`, and returns the closest color to it.
# You can then use `{{closest_color}}` inside templates and hooks.
# colors_to_compare = [
#     { name = "black", color = "#000000" },
#     { name = "red", color = "#ff0000" },
#     { name = "maroon", color = "#800000" },
#     { name = "yellow", color = "#ffff00" },
#     { name = "olive", color = "#808000" },
#     { name = "lime", color = "#00ff00" },
#     { name = "green", color = "#008000" },
#     { name = "aqua", color = "#00ffff" },
#     { name = "teal", color = "#008080" },
#     { name = "blue", color = "#0000ff" },
#     { name = "navy", color = "#000080" },
#     { name = "fuchsia", color = "#ff00ff" },
#     { name = "purple", color = "#800080" },
# ]
# compare_to = "{{colors.primary.default.hex}}"
#
# Runs before the template is exported. You can use keywords here,
# pre_hook = 'echo "source color {{colors.source_color.default.hex}}, source image {{image}}, closest color {{closest_color}}"'
# Runs after the template is exported. You can use keywords here.
# post_hook = 'echo "after gen"'

# Only hex values
# https://m3.material.io/styles/color/advanced/adjust-existing-colors#1cc12e43-237b-45b9-8fe0-9a3549c1f61e
# Blend is set to true by default. 
[config.custom_colors]
green = "#00ff00"
red = "#ff0000"
blue = { color = "#0000ff", blend = false }
